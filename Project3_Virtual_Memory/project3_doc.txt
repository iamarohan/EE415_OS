       	       	    +---------------------------+
       	       	    |	   EE 415 / PD 511	|
		    | PROJECT 3: VIRTUAL MEMORY	|
		    |	   DESIGN DOCUMENT	|
		    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Maro Han <mhan@kaist.ac.kr> 

>> Fill in your GitLab repository address.

https://gitlab.com/iamarohan/assignment3.git

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

I don’t pass 4 tests, page-merge-seq, page-merge-par, page-merge-stk and page-merge-mm

Also, I have four sections in vm directory. 
These are page.c/h, frame.c/h, swap.c/h, lazy.c/h

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

I didn’t look at any online sources for this assignment. 

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1. struct hash frame_hash;
We define a hash table that acts as the frame table. This is a global variable that is initialized at the very start and terminated last.
 
2.
/*structure in hash table for frame table*/
struct frame_entry
{
   void *page_addr;  			//kernel virtual adress
   tid_t tid;				//tid of process
   struct hash_elem hash_elem;        //hash element
};
This structure represents an entry in the frame table.

3. bool in_load;
This global variable is used to determine if a process is loading an executable currently or not.

4.
/*Entry for a table that manages lazy loading*/
struct lazy_ent
{
  void *p_vaddr;			//the upage the start of an executable file is to 
  							//to be loaded to
  void *vaddr;				//addr of the virtual adresses executable file
  							//should be loaded to
  char *file_name;			//name of executable file
  uint32_t read_bytes;		//number of bytes executable file should read
  uint32_t zero_bytes;		//number of zeros loaded executable file has
  bool writable;			//is the file is writable
  off_t ofs;				//offset of the executable file read
  struct hash_elem hash_elem;  //hash element
};
Structure that is one entry for a table that manages lazy loading.

5.
//structure for the hash list for supplementary page table
struct sup_pte
{
  void *vaddr;				//virtual addr
  void *paddr;				//physical addr
  bool swap;					//true if in swap
  bool writable;			//true if writable
  bool mapped;				//true if mapped file
  int  fd;					  //file descriptor
  int  file_order;   //order of file (used for mmap)
  int  zero_count;   //number of zeros (used for mmap)
  struct file *file; //pointer to mapped file
  size_t bitmap_loc;			//bitmap loc of swap table
  struct hash_elem hash_elem;	//hash element
};
Structure that is one entry for the supplemental page table.

6.
//entry for hash list for swap_table
struct st_entry
{
   void *vaddr;					//kernel virtual address of the page that 
								//is evicted to swap table
   size_t bitmap_loc;			//bitmap location of this swap element
   struct hash_elem hash_elem;  //hash element
};
Structure that represents one entry for swap table.

7.
struct block *swap;
block structure for swap disk

8.
static struct bitmap *swap_bitmap;
bitmap for swap table

9.
static struct lock swap_lock;
lock for bitmap manipulation is swap disk

10.
static struct hash swap_table;
swap table hash structure

11.
/*thread structure*/
struct thread
  {
    …
    //project 3
    struct hash *sup_pt;		//points to sup page table
    struct hash *lazy;			//points to lazy loading management table
    int stack_growth;			//tracks how much stack grew
  };
There are three new entries to the thread structure. I omitted the rest of the thread structure because they are for previous projects and nothing is removed.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

First we check with the supplementary page table where the vaddr belongs. If the data is contained in a frame, the swap Boolean value is 0. If the vaddr is in frame, we obtained the physical address, which is stored in the supplementary page table, and return the data stored in that page.

If it is not in frame table, it means it is not in page directory causing a page fault. In this case, we check if the data is valid by seeing if the supplemental page table entry corresponding to the faulted virtual address indicated that the data is in swap or is in lazy loading management table. 

If it is in swap, we use the bitmap_location of the page (which is stored during frame eviction process) to read the data from swap into a physical address and return that frame.

If it is in lazy management table, we load a frame (possible through swap in + swap out mechanism) and read the executable file into the page. The file name is stored during the lazy management process.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

My system only allows accessing data through user virtual addresses. Because we didn’t implement file sharing, this didn’t cause anymore issues.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Palloc_get_page has an internal lock that prevents two process from accessing the bitmap at the same time. 

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

I largely followed the instructions given from the pintos documentation and percept slides. I segmented every element into different data structures because I felt like it was intuitive to understand and prevented me from mixing different functions (like mixing frame table and swap disk management).

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Same structures explained in the previous section.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We first decide a clock position by using 
random_ulong() % hash_size(&frame_hash);

Then, from the initial element of the frame_table, we advance the hash_iterator “i” by clock_position. We start reading the frame_table from the element pointed by the iterator. We first iterate the frame_table looking for elements that has is_accessed bit to 0.

If this element is found, we delete it from frame table, insert it into swap table, save the information that memory referenced by this vaddr is in swap in supplementary page table, clear pagedir entry on this vaddr and free the frame. 

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

The entry for frame table contains the tid of the process which used the frame. Using this, we can identify the thread that allocated the frame. Then, we use standard frame eviction policy with the original owner to evict the frame.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We detect this by seeing if the esp of the faulted intr_frame is either 4 or 32 bigger than the faulted address.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We made frame table and swap table global. Lazy management and supplemental page table is per process. This disallows mutual exclusion.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

P can only evict frames (or allocate additional frames) if the faulted address is in the supplemental page table (which is per process).

During the eviction process, we check if the evicted frame is in the supplemental page table of the same process and prevent evicting if it is not. This prevents another process from accessing another process’s page.

If it is not, we access the information in the frame entry that points to the frame we will evict. The entry contains the pid of the previous process. With this, we can access data elements of the process that accessed the evicted frame previously. However, the address of the frame itself is hidden in the abstraction of frame table.

Race condition is avoided by having a lock in swap table management, which prevents users from accessing swap table simultaneously. 

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Evicting the frame requires accessing the swap table (Q must read to swap table). This is prevented by a swap table lock. One cannot access the swap disk simultaneously due to a lock.

For file system, we employ a global flag named in_load. If in_load is 1, another process cannot access the same file simultaneously. 

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

We use page faults to bring back pages, as the data about pages are still stored into supplementary page table. Using this data, we page back during page_fault. 

Invalid virtual addresses are not picked up by any conditionals in the page_fault handler. This allows the process to reach the end of page_fault handler, which will be rejected.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

My implementation uses multiple locks, which gives freedom to parallelism. This implementation was used by me so the necessary sections that are in lock is minimal.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

1.
//structure for the hash list for supplementary page table
struct sup_pte
{
  void *vaddr;				//virtual addr
  void *paddr;				//physical addr
  bool swap;					//true if in swap
  bool writable;			//true if writable
  bool mapped;				//true if mapped file
  int  fd;					  //file descriptor
  int  file_order;   //order of file (used for mmap)
  int  zero_count;   //number of zeros (used for mmap)
  struct file *file; //pointer to mapped file
  size_t bitmap_loc;			//bitmap loc of swap table
  struct hash_elem hash_elem;	//hash element
};

Same structure as in previous section, but especially elements mapped, int fd, int file_order, int zero_count and file pointer file. 

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Data about maped files are stored in the supplemental page table. Using mmap, we create entries that contain information read from files. If it is dirty later, we write back modified data into the file using the munmap syscall. 

More specifically, on mmap syscall, we store zero_count, pointer to file, fd. We also store file_order, which is used if the file is larger than a page. It increases by one every page this file uses, so we know where to start writing back to the file if we do later.


>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

We check if the new allocated address exists in the supplementary page table already. If it is, mmap returns -1 to indicate failure. 

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

My code does share the shape, mostly because the mechanism for reading the file into page is a modified version of the code in load_segment function. However, fundamentally, information about mmaped files are only stored in supplemental page table, where pages that are demand paged have their own hashed table to store information about themselves.

I did not just add information about demand paged files to the supplemental page table because it would make the supplemental page stable too big and complicated, causing programming hard. Especially because the two mappings share similarities, and this makes it more confusing. 

Moreover, from what I understood it seemed like the amount of information about demand-paged executables seemed larger than mappings created from mmap, and thus deserved a structure of its own. 

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

I think this assignment required a lot of work, but it was what I expected from this course.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, definitely into the virtual memory section. More specifically about how file system, virtual memory and physical disk work together.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

I think hints about VM synchronization should be given because there are almost no mention about it in the pintos document itself.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

I was very confused at the start about the kernel virtual address, user virtual address concept. I couldn’t figure out their relation to physical addresses, and the terminology physical address (which points to main memory not disk address) was confusing at start. Maybe distinction on this could be given more thoroughly. 


